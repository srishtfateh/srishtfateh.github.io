initSidebarItems({"constant":[["DEFAULT_BLOCKHASH_CONTRACT","Default EIP-210 contract code. As defined in https://github.com/ethereum/EIPs/pull/210"],["MAX_UNCLE_AGE","The number of generations back that uncles can be."]],"enum":[["ConstructedVerifier","Generated epoch verifier."],["EngineError","Voting errors."],["EpochChange","Results of a query of whether an epoch change occurred at the given block."],["ForkChoice","Fork choice."],["Proof","Proof generated on epoch change."],["Seal","Seal type."],["SealingState","The type of sealing the engine is currently able to perform."],["SystemOrCodeCallKind","Kind of SystemOrCodeCall, this is either an on-chain address, or code."]],"fn":[["default_system_or_code_call","Default SystemOrCodeCall implementation."],["total_difficulty_fork_choice","t_nb 9.3 Check whether a given block is the best block based on the default total difficulty rule."]],"mod":[["block_reward","A module with types for declaring block rewards and a client interface for interacting with a block reward contract."],["epoch","Epoch verifiers and transitions."],["signer","A signer used by Engines which need to sign messages."]],"struct":[["AuthorityRound","Engine using `AuthorityRound` proof-of-authority BFT consensus."],["BasicAuthority","Engine using `BasicAuthority`, trivial proof-of-authority consensus."],["Clique","Clique Engine implementation"],["EpochTransition","A full epoch transition."],["InstantSeal","An engine which does not provide any consensus mechanism, just seals blocks internally. Only seals blocks which have transactions."],["InstantSealParams","`InstantSeal` params."],["NoOp","Special “no-op” verifier for stateless, epoch-less engines."],["NullEngine","An engine which does not provide any consensus mechanism and does not seal blocks."]],"trait":[["Engine","A consensus mechanism for the chain. Generally either proof-of-work or proof-of-stake-based. Provides hooks into each of the major parts of block import."],["EpochVerifier","Verifier for all blocks within an epoch with self-contained state."],["EthEngine","Common type alias for an engine coupled with an Ethereum-like state machine."],["StateDependentProof","Proof dependent on state."]],"type":[["Headers","Type alias for a function we can get headers by hash through."],["PendingTransitionStore","Type alias for a function we can query pending transitions by block hash through."],["SystemCall","A system-calling closure. Enacts calls on a block’s state from the system address."],["SystemOrCodeCall","A system-calling closure. Enacts calls on a block’s state with code either from an on-chain contract, or hard-coded EVM or WASM (if enabled on-chain) codes."]]});