initSidebarItems({"enum":[["ForceUpdateSealing","Do we want to force update sealing?"],["StateOrBlock","State information to be used during client query"]],"struct":[["TransactionRequest","The data required for a `Client` to create a transaction."]],"trait":[["AccountData","Provides methods to access account info"],["BadBlocks","Provides recently seen bad blocks."],["Balance","Provides `balance` and `latest_balance` methods"],["BlockChain","Provides various blockchain information, like block header, chain state etc."],["BlockChainClient","Blockchain database client. Owns and manages a blockchain and a block queue."],["BlockChainReset","resets the blockchain"],["BlockInfo","Provides various information on a block by it’s ID"],["BlockProducer","Provides methods used for sealing new state"],["BroadcastProposalBlock","Provides `broadcast_proposal_block` method"],["Call","Provides `call` and `call_many` methods"],["ChainInfo","Provides `chain_info` method"],["EngineClient","Client facilities used by internally sealing Engines."],["EngineInfo","Provides `engine` method"],["ImportBlock","Provides methods to import block into blockchain"],["ImportExportBlocks","Provides a method for importing/exporting blocks"],["ImportSealedBlock","Provides `import_sealed_block` method"],["IoClient","IO operations that should off-load heavy work to another thread."],["Nonce","Provides `nonce` and `latest_nonce` methods"],["PrepareOpenBlock","Provides `prepare_open_block` method"],["ProvingBlockChainClient","Extended client interface for providing proofs of the state."],["ReopenBlock","Provides `reopen_block` method"],["ScheduleInfo","Provides `latest_schedule` method"],["SealedBlockImporter","Provides methods to import sealed block and broadcast a block proposal"],["StateClient","Provides methods to access chain state"],["TransactionInfo","Provides various information on a transaction by it’s ID"]]});